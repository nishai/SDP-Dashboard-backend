.DEFAULT_GOAL := help
# force rebuilds
.PHONY: help dist fresh stop Dockerfile


# =========================================================================	#
# HELP                                                                      #
# =========================================================================	#

help:
	@echo
	@echo "This file (Makefile.docker) has all the same targets as (Makefile)."
	@echo "    - The reason for this is that the default (Makefile) is copied"
	@echo "      into a docker container supporting make and run there,"
	@echo "      with this makefile forwarding along the calls"
	@echo
	@make help
	@echo
	@echo " Usage:"
	@echo "       make -f Makefile.docker"
	@echo
	@echo "    [Makefile.docker]:"
	@echo
	@echo "    rm                 Delete the docker volumes for persistent data"
	@echo "    Dockerfile         Build the Dockerfile from the local repo's current state"

# =========================================================================	#
# DOCKER                                                                    #
# =========================================================================	#

# the difference between '=' and ':='
#     - ':=' is only evaluated once when it is defined
#     - ' =' acts like a function and is evaluated whenever it is USED

NAME_PREFIX      = $(if $(name),$(name),backend)

IMAGE_NAME       = $(NAME_PREFIX)-image
CONTAINER_NAME   = $(NAME_PREFIX)-container

VOLUME_DATA      = $(NAME_PREFIX)-volume-data
VOLUME_LOGS      = $(NAME_PREFIX)-volume-logs

DEV_PORT        := $(shell make echo-dev-port)
PROD_PORT       := $(shell make echo-prod-port)

# =========================================================================	#
# [Makefile] Specific Targets                                               #
# =========================================================================	#

# targets from [Makefile]
# *NB* KEEP THESE VARIABLES UPDATED!
TARGETS_USAGE   := migrate import dev test dist serve
TARGETS_CLEAN   := clean-migrations clean-data clean-dist clean-logs clean-cov clean-pycache clean
TARGETS         := $(TARGETS_USAGE) $(TARGETS_CLEAN)

# The following targets run in sequence to form a single target due to the *DOUBLE COLONS*
# *DOUBLE COLONS* let you have multple targets with the same name.

# set the variables for the target

RUN_FLAGS       := # nothing

test       :: name = backend-tests
serve      :: name = backend-prod

serve      :: RUN_FLAGS += -p $(PROD_PORT):$(PROD_PORT)
dev        :: RUN_FLAGS += -p $(DEV_PORT):$(DEV_PORT)
dev        :: RUN_FLAGS += --volume "$(shell pwd)/dashboard:/app/dashboard" # manage.py not supported
$(TARGETS) :: RUN_FLAGS += --volume "$(VOLUME_DATA):/app/data"
$(TARGETS) :: RUN_FLAGS += --volume "$(VOLUME_LOGS):/app/logs"
$(TARGETS) :: RUN_FLAGS += -t $(shell [ -t 0 ] && echo "-i") # terminal flags, -t for color, and -i is only added if its an interactive terminal

# Run the sequence of commands for the target
# Append commands with || true

test       :: rm
$(TARGETS) :: Dockerfile fresh
	@make section tag="Run - $@"
	@# unknown volumes are automatically created by $ docker run
	@# TODO: add bash EXIT trap, eg: $ bash -c "trap 'docker-compose down' EXIT; docker-compose up --build"
	docker run --name $(CONTAINER_NAME) $(RUN_FLAGS) $(run_args) $(IMAGE_NAME) $@ $(make_args) || true
test       ::
	@make section tag="Copy ./coverage"
	docker cp "$(CONTAINER_NAME):/app/coverage" "$(shell pwd)/" || true
dist       ::
	@make section tag="Copy ./dist"
	docker cp "$(CONTAINER_NAME):/app/dist" "$(shell pwd)/" || true
dev serve  ::
	@make section tag="Copy ./logs"
	docker cp "$(CONTAINER_NAME):/app/logs" "$(shell pwd)/" || true
$(TARGETS) :: stop

# =========================================================================	#
# [Makefile.Docker] Specific Targets                                        #
# =========================================================================	#

# Target needs to be run twice above.
# If the same name is specified twice, only the first instance is run.
fresh stop:
	@make section tag="Stopping & Removing Container"
	docker container stop $(CONTAINER_NAME) || true
	docker container rm $(CONTAINER_NAME) || true

rm: fresh
	@make section tag="Removing Default Volumes"
	@docker volume rm $(VOLUME_DATA) || true
	@docker volume rm $(VOLUME_LOGS) || true

# ========================================================================= #
# DOCKERFILE                                                                #
# ========================================================================= #

FORCE:
	@# this target is used to trick a wildcard target into acting like .PHONY

Dockerfile: FORCE
ifneq ($(and $(http_proxy),$(https_proxy)),) # this means: ifdef http_proxy && ifdef https_proxy
	@make section tag="Building $@ $(if $(no_cache),--no-cache,)" details="http_proxy & https_proxy are both set"
	docker build \
		--build-arg http_proxy_encoded='$(http_proxy)' \
		--build-arg https_proxy_encoded='$(https_proxy)' \
		--build-arg http_proxy='$(shell python2 -c "import urllib; print urllib.unquote_plus('$(http_proxy)')")' \
		--build-arg https_proxy='$(shell python2 -c "import urllib; print urllib.unquote_plus('$(https_proxy)')")' \
		$(if $(build_args),$(build_args),) $(if $(no_cache),--no-cache,) \
		-t $(IMAGE_NAME) -f $(if $(dockerfile_name),$(dockerfile_name),$@) ./
else
	@make section tag="Building $@ $(if $(no_cache),--no-cache,)" details="If behind a proxy, set both (lowercase) http_proxy & https_proxy"
	docker build \
		$(if $(build_args),$(build_args),) $(if $(no_cache),--no-cache,) \
		-t $(IMAGE_NAME) -f $(if $(dockerfile_name),$(dockerfile_name),$@) ./
endif

